Адаптировать Scanner к PersonScanner.
Классом-адаптером является PersonScannerAdapter.
В классе адаптере создать приватное финальное поле Scanner fileScanner. Поле инициализировать в конструкторе с одним аргументом типа Scanner.

Данные в файле хранятся в следующем виде:
Иванов Иван Иванович 31 12 1950
Петров Петр Петрович 31 12 1957

В файле хранится большое количество людей, данные одного человека находятся в одной строке.
 Метод read() должен читать данные только одного человека.

 public Person read() throws IOException, ParseException {
            fileScanner = new Scanner(new FileReader("E:\\1.txt"));
             String line = fileScanner.nextLine();
             String[] strings = line.split(" +");
             String data = strings[3] + "." + strings[4] +"." + strings[5];
             SimpleDateFormat format = new SimpleDateFormat();
             format.applyPattern("ddMMyyyy");
             Date docDate= format.parse(data);
             return new Person(strings[0],strings[1],strings[2],docDate);
         }

          Person person;

                     File file = new File("/home/bns/1.txt");
                     Scanner sc = new Scanner(file);
                     String[] line = null;

                     while (sc.hasNextLine()){
                         line = sc.nextLine().split(" ");
                         break;
                     }
                     String dateString = line[3] + line[4] + line[5];

                     Date date = Date.valueOf(dateString);

                     person = new Person(line[0], line[1], line[2], date);

                     return person;
                 }

Требования:

    PersonScanner должен быть интерфейсом.
    •
    Класс PersonScannerAdapter должен реализовывать интерфейс PersonScanner.
    •
    Класс PersonScannerAdapter должен содержать приватное поле fileScanner типа Scanner.
    •
    Класс PersonScannerAdapter должен содержать конструктор с параметром Scanner.
    •
    Метод close() класса PersonScannerAdapter должен делегировать полномочие такому же методу fileScanner.
    •
    Метод read() класса PersonScannerAdapter должен читать строку с файла, парсить её,
    и возвращать данные только одного человека, в виде объекта класса Person.

package com.javarush.task.task19.task1904;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

/*
    Метод read() класса PersonScannerAdapter должен читать строку с файла, парсить её,
    и возвращать данные только одного человека, в виде объекта класса Person.
    C:\Users\ELX\Documents\002.txt
    */

public class Solution {

    public static void main(String[] args) throws IOException, ParseException {

//        Scanner scanner = new Scanner(new File("C:\\Users\\ELX\\Documents\\002.txt"));
//
//        PersonScannerAdapter personScannerAdapter = new PersonScannerAdapter(scanner);
//
//        System.out.println(personScannerAdapter.read());

    }

    public static class PersonScannerAdapter implements PersonScanner {

        private Scanner fileScanner;

        public PersonScannerAdapter(Scanner fileScanner) {
            this.fileScanner = fileScanner;
        }

        @Override
        public Person read() throws IOException, ParseException {

           // fileScanner = new Scanner(new File("C:\\Users\\ELX\\Documents\\002.txt"));
            String [] strings = fileScanner.nextLine().split(" ");
            String stringData = strings[3] + " " + strings[4] + " " + strings[5];

            SimpleDateFormat format = new SimpleDateFormat("dd MM yyyy");
            Date myDate= format.parse(stringData);

            Person person = new Person(strings[1], strings[2], strings[0], myDate);

            return person;
        }

        @Override
        public void close() throws IOException {
            fileScanner.close();
        }
    }
}
package com.javarush.task.task19.task1904;

import java.util.Date;

public class Person {
    private String firstName;
    private String middleName;
    private String lastName;
    private Date birthDate;

    public Person(String firstName, String middleName, String lastName, Date birthDate) {
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.birthDate = birthDate;
    }

    @Override
    public String toString() {
        return String.format("%s %s %s %s", lastName, firstName, middleName, birthDate.toString());
    }
}


package com.javarush.task.task19.task1904;

import java.io.IOException;

public interface PersonScanner {
    Person read() throws IOException;

    void close() throws IOException;
}