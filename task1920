В метод main первым параметром приходит имя файла.
В этом файле каждая строка имеет следующий вид:
имя значение
где [имя] - String, [значение] - double. [имя] и [значение] разделены пробелом.

Для каждого имени посчитать сумму всех его значений.
Вывести в консоль имена в алфавитном порядке, у которых максимальная сумма.
Имена разделять пробелом либо выводить с новой строки.
Закрыть потоки.

Пример входного файла:
Абрамян 1.35
Иванов 1.35
Абрамян 1.35
Сидоров 0.501
Иванов 1.35
Бугу 1.35
Вугу 1.35
Бугу 1.35
Вугу 1.35
Сидоров 0.85

Пример вывода:
Абрамян
Бугу
Вугу
Иванов

Требования:

    •
    Программа НЕ должна считывать данные с консоли.
    •
    Программа должна считывать содержимое файла (используй FileReader).
    •
    Поток чтения из файла (FileReader) должен быть закрыт.
    •
    Программа должна выводить в консоль имена, у которых максимальная сумма.

package com.javarush.task.task19.task1920;

import java.io.*;
import java.util.*;
/*
Самый богатый
*/

public class Solution {
     public static void main(String[] args) throws IOException {

         BufferedReader bufferedReader = new BufferedReader(new FileReader(args[0]));
         ArrayList<String> arrString = new ArrayList<>();
         ArrayList<Double> arrDouble = new ArrayList<>();

         Map<String, Double> map = new HashMap<String, Double>();

         while (true) {
             String s = bufferedReader.readLine();
             if (s == null) {break;}
             String[] strings = s.split(" ");

             if (arrString.contains(strings[0])) {
                 int index = arrString.indexOf(strings[0]);
                 arrString.set(index, strings[0]);
                 arrDouble.set(index, arrDouble.get(index) + Double.parseDouble(strings[1]));
                 map.put(arrString.get(index), arrDouble.get(index));
             } else {
                 arrString.add(strings[0]);
                 Double d = Double.parseDouble(strings[1]);
                 arrDouble.add(d);
                 map.put(strings[0], d);
             }
         }

         Double d = Collections.max(arrDouble);
         arrString.clear();

         for(Map.Entry<String, Double> item : map.entrySet()){
            if(item.getValue().equals(d)){
               arrString.add(item.getKey());
            }
         }

         Collections.sort(arrString);

         for(String s: arrString){
             System.out.println(s);
         }

         bufferedReader.close();

     }
 }


 // решение №2

 import java.io.*;
 import java.util.*;
 /*
 Самый богатый
 */

 public class Solution {
     public static void main(String[] args) throws IOException {
         BufferedReader bufferedReader = new BufferedReader(new FileReader(args[0]));
         Map<String, Double> treeMap = new TreeMap<String, Double>();
         while (true) {
             String s = bufferedReader.readLine();
             if (s == null) {break;}
             String[] strings = s.split(" ");

             if (treeMap.containsKey(strings[0])) {
                 treeMap.put(strings[0], treeMap.get(strings[0]) + Double.parseDouble(strings[1]));
             } else {
                 treeMap.put(strings[0], Double.parseDouble(strings[1]));
             }
         }
         Double maxValueInMap=(Collections.max(treeMap.values()));  // This will return max value in the Hashmap

         for(Map.Entry entry : treeMap.entrySet() ){
             if(entry.getValue().equals(maxValueInMap)){
                 System.out.println(entry.getKey());
             }
         }
         bufferedReader.close();
     }
 }